#!/usr/bin/env php
<?php

namespace Gentry;

use Ansi;
use RecursiveIteratorIterator;
use RecursiveDirectoryIterator;
use ReflectionClass;
use ReflectionMethod;
use ReflectionException;
use Closure;
use zpt\anno\Annotations;
use Kingconf;
use Exception;
use ErrorException;

$start = microtime(true);

if (!ini_get('date.timezone')) {
    ini_set('date.timezone', 'UTC');
}

error_reporting(E_ALL);
set_error_handler(function($errno, $errstr, $errfile, $errline, $errcontext) {
    if ($errno == E_USER_DEPRECATED) {
        return;
    }
    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
});
require __DIR__.'/src/helpers.php';

foreach ([
    __DIR__.'/../../autoload.php',
    __DIR__.'/../../vendor/autoload.php',
    __DIR__.'/../vendor/autoload.php',
    __DIR__.'/vendor/autoload.php',
] as $file) {
    if (file_exists($file)) {
        break;
    }
    unset($file);
}

if (!isset($file)) {
    fwrite(STDERR, <<<EOT
\033[1;31mError: \033[0mYou need to set up the project dependencies using the following commands:

\033[1;33mwget http://getcomposer.org/composer.phar
php composer.phar install\033[0m

EOT
    );
    die(1);
}

$autoloader = require $file;
putenv("GENTRY_VENDOR=".realpath(dirname($file)));
unset($file);

// Indicates we're running as Gentry, hence environment should deal with tests
// and associated fixtures instead of a "normal" database.
putenv("GENTRY=1");

// A pseudo-random client id for this run of tests. Used mainly to associate a
// cache pool with a single client in a cross-script manner (e.g. when running
// acceptance tests). It's also passed as the default session id to the Browser
// headless client (you can override it if your application uses specific checks
// on session id validity).
$client = substr(md5(microtime(true)), 0, 6);
putenv("GENTRY_CLIENT=$client");

out("\n<magenta>Gentry 0.8.1 by Marijn Ophorst\n\n");

$config = 'Gentry.json';
$verbose = false;
$generate = false;
foreach ($argv as $i => $arg) {
    if (!$i) {
        continue; // ignore self
    }
    if ($arg == '-v') {
        $verbose = true;
    } elseif ($arg == '-g') {
        $generate = true;
    } elseif (preg_match('@--filter=(.*)@', $arg, $filter)) {
        $filter = $filter[1];
    } else {
        $config = $arg;
    }
}
define('Gentry\VERBOSE', $verbose);
try {
    $config = (object)(array)(new Kingconf\Config($config));
} catch (Kingconf\Exception $e) {
    out("<red>Error: <reset> Config file $config not found or invalid.\n", STDERR);
    die(1);
}
if (isset($config->bootstrap)) {
    $bootstrap = is_array($config->bootstrap) ? $config->bootstrap : [$config->bootstrap];
    foreach ($bootstrap as $file) {
        require $file;
    }
}

$sourcecode = new Sourcecode($config);
if (VERBOSE) {
    out(sprintf(
        "<gray>Found %d file%s with testable source code.\n",
        count($sourcecode->sources),
        count($sourcecode->sources) == 1 ? '' : 's'
    ));
}

$existing = new Existing($config);
if (VERBOSE) {
    out(sprintf(
        "<gray>Found %d previously defined test%s.\n",
        count($existing->tests),
        count($existing->tests) == 1 ? '' : 's'
    ));
}
if (VERBOSE && $existing->tests) {
    out(sprintf(
        "<gray>Running existing unit test%...\n",
        count($existing->tests == 1) ? '' : 's'
    ));
}

$coveredFeatures = [];
$notcovered = 0;
$tested = 0;
$passed = 0;
$failed = 0;
$messages = [];
$incomplete = 0;
foreach ($existing->tests as $classname => $file) {
    $class = new $classname;
    $reflection = new ReflectionClass($class);
    $annotations = new Annotations($reflection);
    $ok = false;
    foreach ($reflection->getMethods(ReflectionMethod::IS_PUBLIC) as $method) {
        $anns = new Annotations($method);
        if (!isset($anns['Incomplete'])) {
            $ok = true;
        } else {
            $incomplete++;
        }
    }
    if (!$ok && !VERBOSE) {
        continue;
    }
    if ($reflection->getDocComment()) {
        out("<darkBlue>".cleanDocComment($reflection)."\n");
    }
    foreach ($reflection->getMethods(ReflectionMethod::IS_PUBLIC) as $method) {
        if (isset($filter)
            && !preg_match("@$filter@", "$classname::$method")
        ) {
            continue;
        }
        if ($method->name{0} == '_') {
            continue;
        }
        $tested++;
        $test = new Test($class, $method);
        $annotations = new Annotations($method);
        if (!isset($annotations['Incomplete'])) {
            Cache\Pool::getInstance()->clear();
            if (method_exists($class, '__wakeup')) {
                echo "  \033[1;30m* ";
                echo "\033[0;37mInitialising...     ";
                $steps = $class->__wakeup();
                if ($steps) {
                    $i = 0;
                    $total = count($steps);
                    while ($step = array_shift($steps)) {
                        $step();
                        ++$i;
                        echo "\033[4D\033[1;30m".str_pad(round($i / $total * 100), 3, ' ', STR_PAD_LEFT).'%';
                    }
                }
                echo "\033[24D\033[0m";
            }
        }
        $args = $test->run($passed, $failed, $messages);
        $features = $test->getTestedFeatures();

        if (method_exists($class, '__sleep')) {
            $class->__sleep();
        }
    }
    unset($class);
}
out("\n");

foreach (Logger::getInstance()->getLoggedFeatures() as $type => $features) {
    if ($type == Logger::METHOD) {
        foreach ($features as $target => $features) {
            if (!isset($coveredFeatures[$target])) {
                $coveredFeatures[$target] = [];
            }
            foreach ($features as $feature) {
                if (!in_array($feature, $coveredFeatures[$target])) {
                    $coveredFeatures[$target][] = $feature;
                }
            }
        }
    }
}
if ($passed) {
    out(sprintf(
        "<green>%d test%s passed.\n",
        $passed,
        $passed == 1 ? '' : 's'
    ));
}
if ($incomplete) {
    out(sprintf(
        "<magenta>%d test%s marked as incomplete.\n",
        $incomplete,
        $incomplete == 1 ? '' : 's'
    ), STDERR);
}
if ($failed) {
    out(sprintf(
        "<red>%d test%s failed!\n",
        $failed,
        $failed == 1 ? '' : 's'
    ), STDERR);
    foreach ($messages as $msg) {
        out("$msg\n");
    }
}

$classes = 0;
$methods = 0;
$uncovered = [];
foreach ($sourcecode->sources as $file => $code) {
    if (!isset($coveredFeatures[$code[0]->name])) {
        $classes++;
        $methods += count($code[1]);
        $uncovered[$code[0]->name] = $code[1];
    } else {
        foreach ($code[1] as $method) {
            if (!in_array($method->name, $coveredFeatures[$code[0]->name])) {
                $methods++;
                if (!isset($uncovered[$code[0]->name])) {
                    $uncovered[$code[0]->name] = [];
                }
                $uncovered[$code[0]->name][] = $method;
            }
        }
    }
}
if (VERBOSE) {
    out("\n");
    if ($classes) {
        out(sprintf(
            "<cyan>Missing %d class scenario%s.\n",
            $classes,
            $classes == 1 ? '' : 's'
        ));
    }
    if ($methods) {
        out(sprintf(
            "<cyan>Missing (at least) %d method test%s.\n",
            $methods,
            $methods == 1 ? '' : 's'
        ));
    }
}

$endit = function ($code) use ($start) {
    try {
        @unlink(sys_get_temp_dir().'/'.getenv("GENTRY_CLIENT").'.cache');
    } catch (ErrorException $e) {
    }
    out("\n");
    out(sprintf(
        "\n<magenta>Took %0.2f seconds, memory usage %4.2fMb.\n\n",
        microtime(true) - $start,
        memory_get_peak_usage(true) / 1048576
    ));
    exit($code);
};
if ($classes || $methods) {
    if (!$generate && VERBOSE) {
        out("<gray>Run with <magenta>-g<gray> flag to generate skeletons.\n");
        $endit($failed ? 1 : 0);
    }
}
if (!($classes || $methods) || !$generate) {
    $endit($failed ? 1 : 0);
}

if (VERBOSE) {
    out("<gray>Generating test skeletons as requested...\n");
}

$generator = new TestGenerator($config->tests);
foreach ($sourcecode->sources as $file => $code) {
    if (!isset($uncovered[$code[0]->name])) {
        continue;
    }
    $generator->generate($code[0], $uncovered[$code[0]->name]);
}
$generator->write();

